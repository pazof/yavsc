@inherits Microsoft.Extensions.CodeGeneration.Templating.RazorTemplateBase
using System.Linq;
@{
    if (Model.UseAsync)
    {
@:using System.Threading.Tasks;
    }
}using Microsoft.AspNet.Mvc;
using Microsoft.AspNet.Mvc.Rendering;
using Microsoft.Data.Entity;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@:using @namespaceName;
    }
}

namespace @Model.ControllerNamespace
{
@{
    string routePrefix;
    if (String.IsNullOrEmpty(Model.AreaName))
    {
        routePrefix = Model.ControllerRootName;
    }
    else
    {
        routePrefix = Model.AreaName + "/" + Model.ControllerRootName;
    }
    var contextTypeName = Model.ContextTypeName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var entitySetVar = Model.EntitySetVariable ??
        (String.IsNullOrEmpty(entitySetName)
            ? entitySetName
            : (entitySetName.Substring(0, length: 1).ToLowerInvariant() + entitySetName.Substring(1)));
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyNullableTypeName = GetNullableTypeName(primaryKeyType, primaryKeyShortTypeName);
    var lambdaVar = Model.ModelVariable[0];
    var relatedProperties = new Dictionary<string, dynamic>();
    foreach(var nav in Model.ModelMetadata.Navigations)
    {
        relatedProperties.Add(nav.AssociationPropertyName, nav);

    }
}
    public class @Model.ControllerName : Controller
    {
        private @Model.ContextTypeName _context;

        public @(Model.ControllerName)(@Model.ContextTypeName context)
        {
            _context = context;    
        }

        // GET: @routePrefix
@{
    if (Model.UseAsync)
    {
        @:public async Task<IActionResult> Index()
    }
    else
    {
        @:public IActionResult Index()
    }
        @:{
    var includeExpressions = "";
    includeExpressions = String.Join("", relatedProperties
        .Values
        .Select(property => String.Format(".Include({0} => {0}.{1})", lambdaVar, property.AssociationPropertyName)));
    if (!String.IsNullOrEmpty(includeExpressions))
    {
            @:var @entitySetVar = _context.@entitySetName@includeExpressions;
        if (Model.UseAsync)
        {
            @:return View(await @(entitySetVar).ToListAsync());
        }
        else
        {
            @:return View(@(entitySetVar).ToList());
        }
    }
    else
    {
        if (Model.UseAsync)
        {
            @:return View(await _context.@(entitySetName).ToListAsync());
        }
        else
        {
            @:return View(_context.@(entitySetName).ToList());
        }
    }
}        }

        // GET: @routePrefix/Details/5
@{
    if (Model.UseAsync)
    {
        @:public async Task<IActionResult> Details(@primaryKeyNullableTypeName id)
    }
    else
    {
        @:public IActionResult Details(@primaryKeyNullableTypeName id)
    }
}        {
            if (id == null)
            {
                return HttpNotFound();
            }

@{
    if (Model.UseAsync)
    {
            @:@Model.ModelTypeName @Model.ModelVariable = await _context.@(entitySetName).SingleAsync(m => m.@primaryKeyName == id);
    }
    else
    {
            @:@Model.ModelTypeName @Model.ModelVariable = _context.@(entitySetName).Single(m => m.@primaryKeyName == id);
    }
}            if (@Model.ModelVariable == null)
            {
                return HttpNotFound();
            }

            return View(@Model.ModelVariable);
        }

        // GET: @routePrefix/Create
        public IActionResult Create()
        {
@{
    foreach (var property in relatedProperties.Values)
    {
            @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_context.@property.EntitySetName, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName");
    }
}            return View();
        }

        // POST: @routePrefix/Create
        [HttpPost]
        [ValidateAntiForgeryToken]
@{
    if (Model.UseAsync)
    {
        @:public async Task<IActionResult> Create(@Model.ModelTypeName @Model.ModelVariable)
    }
    else
    {
        @:public IActionResult Create(@Model.ModelTypeName @Model.ModelVariable)
    }
}        {
            if (ModelState.IsValid)
            {
@{
    if(!string.IsNullOrEmpty(primaryKeyType) && IsGuid(primaryKeyType))
    {
                @:@(Model.ModelVariable).@primaryKeyName = Guid.NewGuid();
    }
                @:_context.@(entitySetName).Add(@Model.ModelVariable);
    if (Model.UseAsync)
    {
                @:await _context.SaveChangesAsync();
    }
    else
    {
                @:_context.SaveChanges();
    }
}                return RedirectToAction("Index");
            }
@{
    foreach (var property in relatedProperties.Values)
    {
            @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_context.@property.EntitySetName, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName", @(Model.ModelVariable).@property.ForeignKeyPropertyNames[0]);
    }
}
            return View(@Model.ModelVariable);
        }

        // GET: @routePrefix/Edit/5
@{
    if (Model.UseAsync)
    {
        @:public async Task<IActionResult> Edit(@primaryKeyNullableTypeName id)
    }
    else
    {
        @:public IActionResult Edit(@primaryKeyNullableTypeName id)
    }
}        {
            if (id == null)
            {
                return HttpNotFound();
            }

@{
    if (Model.UseAsync)
    {
            @:@Model.ModelTypeName @Model.ModelVariable = await _context.@(entitySetName).SingleAsync(m => m.@primaryKeyName == id);
    }
    else
    {
            @:@Model.ModelTypeName @Model.ModelVariable = _context.@(entitySetName).Single(m => m.@primaryKeyName == id);
    }
}            if (@Model.ModelVariable == null)
            {
                return HttpNotFound();
            }
@{
    foreach (var property in relatedProperties.Values)
    {
            @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_context.@property.EntitySetName, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName", @(Model.ModelVariable).@property.ForeignKeyPropertyNames[0]);
    }
}
            return View(@Model.ModelVariable);
        }

        // POST: @routePrefix/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
@{
    if (Model.UseAsync)
    {
        @:public async Task<IActionResult> Edit(@Model.ModelTypeName @Model.ModelVariable)
    }
    else
    {
        @:public IActionResult Edit(@Model.ModelTypeName @Model.ModelVariable)
    }
}        {
            if (ModelState.IsValid)
            {
                _context.Update(@Model.ModelVariable);
@{
    if (Model.UseAsync)
    {
                @:await _context.SaveChangesAsync();
    }
    else
    {
                @:_context.SaveChanges();
    }
}                return RedirectToAction("Index");
            }
@{
    foreach (var property in relatedProperties.Values)
    {
            @:ViewData["@(property.ForeignKeyPropertyNames[0])"] = new SelectList(_context.@property.EntitySetName, "@property.PrimaryKeyNames[0]", "@property.DisplayPropertyName", @(Model.ModelVariable).@property.ForeignKeyPropertyNames[0]);
    }
}
            return View(@Model.ModelVariable);
        }

        // GET: @routePrefix/Delete/5
        [ActionName("Delete")]
@{
    if (Model.UseAsync)
    {
        @:public async Task<IActionResult> Delete(@primaryKeyNullableTypeName id)
    }
    else
    {
        @:public IActionResult Delete(@primaryKeyNullableTypeName id)
    }
}        {
            if (id == null)
            {
                return HttpNotFound();
            }

@{
    if (Model.UseAsync)
    {
            @:@Model.ModelTypeName @Model.ModelVariable = await _context.@(entitySetName).SingleAsync(m => m.@primaryKeyName == id);
    }
    else
    {
            @:@Model.ModelTypeName @Model.ModelVariable = _context.@(entitySetName).Single(m => m.@primaryKeyName == id);
    }
}            if (@Model.ModelVariable == null)
            {
                return HttpNotFound();
            }

            return View(@Model.ModelVariable);
        }

        // POST: @routePrefix/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
@{
    if (Model.UseAsync)
    {
        @:public async Task<IActionResult> DeleteConfirmed(@primaryKeyShortTypeName id)
    }
    else
    {
        @:public IActionResult DeleteConfirmed(@primaryKeyShortTypeName id)
    }
        @:{
    if (Model.UseAsync)
    {
            @:@Model.ModelTypeName @Model.ModelVariable = await _context.@(entitySetName).SingleAsync(m => m.@primaryKeyName == id);
    }
    else
    {
            @:@Model.ModelTypeName @Model.ModelVariable = _context.@(entitySetName).Single(m => m.@primaryKeyName == id);
    }
            @:_context.@(entitySetName).Remove(@Model.ModelVariable);
    if (Model.UseAsync)
    {
            @:await _context.SaveChangesAsync();
    }
    else
    {
            @:_context.SaveChanges();
    }
}
            return RedirectToAction("Index");
        }
    }
}
@functions
{
    // This function converts the primary key short type name to its nullable equivalent when possible. This is required to make
    // sure that an HTTP 400 error is thrown when the user tries to access the edit, delete, or details action with null values.
    string GetNullableTypeName(string typeName, string shortTypeName)
    {
        // The exceptions are caught because if for any reason the type is user defined, then the short type name will be used.
        // In that case the user will receive a server error if null is passed to the edit, delete, or details actions.
        Type primaryKeyType = null;
        try
        {
            primaryKeyType = Type.GetType(typeName);
        }
        catch
        {
        }
        if (primaryKeyType != null && (primaryKeyType.IsPrimitive || IsGuid(typeName)))
        {
            return shortTypeName + "?";
        }
        return shortTypeName;
    }

    bool IsGuid(string typeName) {
        return String.Equals("System.Guid", typeName, StringComparison.OrdinalIgnoreCase);
    }
}