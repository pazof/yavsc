@inherits Microsoft.Extensions.CodeGeneration.Templating.RazorTemplateBase
using System.Collections.Generic;
using System.Linq;
@{
    if (Model.UseAsync)
    {
@:using System.Threading.Tasks;
    }
}using Microsoft.AspNet.Http;
using Microsoft.AspNet.Mvc;
using Microsoft.Data.Entity;
@{
    foreach (var namespaceName in Model.RequiredNamespaces)
    {
@:using @namespaceName;
    }
}

namespace @Model.ControllerNamespace
{
@{
    string routePrefix = "api/" + Model.ControllerRootName;
    var entitySetName = Model.ModelMetadata.EntitySetName;
    var primaryKeyName = Model.ModelMetadata.PrimaryKeys[0].PropertyName;
    var primaryKeyShortTypeName = Model.ModelMetadata.PrimaryKeys[0].ShortTypeName;
    var primaryKeyType = Model.ModelMetadata.PrimaryKeys[0].TypeName;
    var primaryKeyIsAutoGenerated = Model.ModelMetadata.PrimaryKeys[0].IsAutoGenerated;
}
    [Produces("application/json")]
    [Route("@routePrefix")]
    public class @Model.ControllerName : Controller
    {
        private @Model.ContextTypeName _context;

        public @(Model.ControllerName)(@Model.ContextTypeName context)
        {
            _context = context;
        }

        // GET: @routePrefix
        [HttpGet]
        public IEnumerable<@Model.ModelTypeName> Get@(entitySetName)()
        {
            return _context.@(entitySetName);
        }

        // GET: @routePrefix/5
        [HttpGet("{id}", Name = "Get@(Model.ModelTypeName)")]
@{
    if (Model.UseAsync)
    {
        @:public async Task<IActionResult> Get@(Model.ModelTypeName)([FromRoute] @primaryKeyShortTypeName id)
    }
    else
    {
        @:public IActionResult Get@(Model.ModelTypeName)([FromRoute] @primaryKeyShortTypeName id)
    }
}
        {
            if (!ModelState.IsValid)
            {
                return HttpBadRequest(ModelState);
            }

@{
    if (Model.UseAsync)
    {
            @:@Model.ModelTypeName @Model.ModelVariable = await _context.@(entitySetName).SingleAsync(m => m.@primaryKeyName == id);
    }
    else
    {
            @:@Model.ModelTypeName @Model.ModelVariable = _context.@(entitySetName).Single(m => m.@primaryKeyName == id);
    }
}

            if (@Model.ModelVariable == null)
            {
                return HttpNotFound();
            }

            return Ok(@Model.ModelVariable);
        }

        // PUT: @routePrefix/5
        [HttpPut("{id}")]
@{
    if (Model.UseAsync)
    {
        @:public async Task<IActionResult> Put@(Model.ModelTypeName)([FromRoute] @primaryKeyShortTypeName id, [FromBody] @Model.ModelTypeName @Model.ModelVariable)
    }
    else
    {
        @:public IActionResult Put@(Model.ModelTypeName)(@primaryKeyShortTypeName id, [FromBody] @Model.ModelTypeName @Model.ModelVariable)
    }
}
        {
            if (!ModelState.IsValid)
            {
                return HttpBadRequest(ModelState);
            }

            if (id != @(Model.ModelVariable).@primaryKeyName)
            {
                return HttpBadRequest();
            }

            _context.Entry(@Model.ModelVariable).State = EntityState.Modified;

            try
            {
@{
    if (Model.UseAsync)
    {
                @:await _context.SaveChangesAsync();
    }
    else
    {
                @:_context.SaveChanges();
    }
}
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!@(Model.ModelTypeName)Exists(id))
                {
                    return HttpNotFound();
                }
                else
                {
                    throw;
                }
            }

            return new HttpStatusCodeResult(StatusCodes.Status204NoContent);
        }

        // POST: @routePrefix
        [HttpPost]
@{
    if (Model.UseAsync)
    {
        @:public async Task<IActionResult> Post@(Model.ModelTypeName)([FromBody] @Model.ModelTypeName @Model.ModelVariable)
    }
    else
    {
        @:public IActionResult Post@(Model.ModelTypeName)([FromBody] @Model.ModelTypeName @Model.ModelVariable)
    }
}
        {
            if (!ModelState.IsValid)
            {
                return HttpBadRequest(ModelState);
            }

            _context.@(entitySetName).Add(@Model.ModelVariable);
@{
    if (primaryKeyIsAutoGenerated)
    {
        if (Model.UseAsync)
        {
            @:await _context.SaveChangesAsync();
        }
        else
        {
            @:_context.SaveChanges();
        }
    }
    else
    {
            @:try
            @:{
        if (Model.UseAsync)
        {
                @:await _context.SaveChangesAsync();
        }
        else
        {
                @:_context.SaveChanges();
        }
            @:}
            @:catch (DbUpdateException)
            @:{
                @:if (@(Model.ModelTypeName)Exists(@(Model.ModelVariable).@primaryKeyName))
                @:{
                    @:return new HttpStatusCodeResult(StatusCodes.Status409Conflict);
                @:}
                @:else
                @:{
                    @:throw;
                @:}
            @:}
    }
}

            return CreatedAtRoute("Get@(Model.ModelTypeName)", new { id = @(Model.ModelVariable).@primaryKeyName }, @Model.ModelVariable);
        }

        // DELETE: @routePrefix/5
        [HttpDelete("{id}")]
@{
    if (Model.UseAsync)
    {
        @:public async Task<IActionResult> Delete@(Model.ModelTypeName)([FromRoute] @primaryKeyShortTypeName id)
    }
    else
    {
        @:public IActionResult Delete@(Model.ModelTypeName)(@primaryKeyShortTypeName id)
    }
}
        {
            if (!ModelState.IsValid)
            {
                return HttpBadRequest(ModelState);
            }

@{
    if (Model.UseAsync)
    {
            @:@Model.ModelTypeName @Model.ModelVariable = await _context.@(entitySetName).SingleAsync(m => m.@primaryKeyName == id);
    }
    else
    {
            @:@Model.ModelTypeName @Model.ModelVariable = _context.@(entitySetName).Single(m => m.@primaryKeyName == id);
    }
}
            if (@Model.ModelVariable == null)
            {
                return HttpNotFound();
            }

            _context.@(entitySetName).Remove(@Model.ModelVariable);
@{
    if (Model.UseAsync)
    {
            @:await _context.SaveChangesAsync();
    }
    else
    {
            @:_context.SaveChanges();
    }
}

            return Ok(@Model.ModelVariable);
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                _context.Dispose();
            }
            base.Dispose(disposing);
        }

        private bool @(Model.ModelTypeName)Exists(@primaryKeyShortTypeName id)
        {
            return _context.@(entitySetName).Count(e => e.@primaryKeyName == id) > 0;
        }
    }
}