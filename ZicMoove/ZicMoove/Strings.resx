<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlreadyExecuting" xml:space="preserve">
    <value>Une execution est déjà en cours</value>
  </data>
  <data name="CancelValidation" xml:space="preserve">
    <value>Annuler la validation</value>
  </data>
  <data name="CreationFailed" xml:space="preserve">
    <value>La création a échoué, contenu envoyé: {stringContent} @ Uri: {ControllerUri.AbsoluteUri}: Erreur : {errcontent}</value>
  </data>
  <data name="DoEstimate" xml:space="preserve">
    <value>Faire un devis</value>
  </data>
  <data name="DonotsignEstimate" xml:space="preserve">
    <value>Valider le devis sans signer</value>
  </data>
  <data name="EditEstimate" xml:space="preserve">
    <value>Editer le devis</value>
  </data>
  <data name="ENoRemoteEntity" xml:space="preserve">
    <value>Erreur d'accès aux données distantes</value>
  </data>
  <data name="FiveStars" xml:space="preserve">
    <value>Star</value>
    <comment>Da star, da one</comment>
  </data>
  <data name="ForStars" xml:space="preserve">
    <value>Célébrité</value>
  </data>
  <data name="NoStar" xml:space="preserve">
    <value>Un artiste</value>
    <comment>pas d'étoile</comment>
  </data>
  <data name="OneStar" xml:space="preserve">
    <value>Étoile montante</value>
  </data>
  <data name="OperationPending" xml:space="preserve">
    <value>Opération en cours</value>
  </data>
  <data name="oups" xml:space="preserve">
    <value>oups.</value>
  </data>
  <data name="Sign" xml:space="preserve">
    <value>Signer</value>
  </data>
  <data name="SignOrNot" xml:space="preserve">
    <value>Signer le devis?</value>
  </data>
  <data name="ThreeStars" xml:space="preserve">
    <value>Incontournable</value>
  </data>
  <data name="TwoStars" xml:space="preserve">
    <value>À ne manquer sous aucun prétexte</value>
  </data>
  <data name="ViewEstimate" xml:space="preserve">
    <value>Voir les devis validés</value>
  </data>
  <data name="UpdateFailed" xml:space="preserve">
    <value>La mise à jour a échoué.</value>
  </data>
  <data name="MinMaxStringValidationError" xml:space="preserve">
    <value>Veuillez saisir une description (entre {0} et {1} caractères).</value>
  </data>
  <data name="YourTextWasTooLong" xml:space="preserve">
    <value>Votre texte a été taillé car il était trop long.</value>
  </data>
  <data name="NoDescription" xml:space="preserve">
    <value>Pas de description</value>
  </data>
  <data name="InvalidValue" xml:space="preserve">
    <value>Valeur invalide</value>
  </data>
  <data name="MinMaxIntError" xml:space="preserve">
    <value>Veuillez saisir une valeur entre {0} et {1}.</value>
  </data>
  <data name="YourFiles" xml:space="preserve">
    <value>Vos fichiers </value>
  </data>
  <data name="Profprof" xml:space="preserve">
    <value>Profile professionnel</value>
  </data>
  <data name="ClientProRequest" xml:space="preserve">
    <value>Restreindre la demande aux clients professionnels</value>
  </data>
  <data name="UserAccounts" xml:space="preserve">
    <value>Comptes utilisateur</value>
  </data>
  <data name="BlockThisUser" xml:space="preserve">
    <value>Bloquer cet utilisateur</value>
  </data>
  <data name="DeclineQuery" xml:space="preserve">
    <value>Décliner cette proposition (envoyer un refus, et archiver la demande)</value>
  </data>
  <data name="GeographicalyNear" xml:space="preserve">
    <value>Géographiquement proche</value>
  </data>
  <data name="SearchForAPro" xml:space="preserve">
    <value>Rechercher un artiste</value>
  </data>
  <data name="Blogspot" xml:space="preserve">
    <value>Blog spot</value>
  </data>
  <data name="ClientAnounces" xml:space="preserve">
    <value>Annonces client</value>
  </data>
  <data name="CLientContracts" xml:space="preserve">
    <value>Contrats client</value>
  </data>
  <data name="EstimateQueries" xml:space="preserve">
    <value>Demandes de devis</value>
  </data>
  <data name="ProAnounces" xml:space="preserve">
    <value>Annonces pro</value>
  </data>
  <data name="ProviderContracts" xml:space="preserve">
    <value>Contrats fournisseur</value>
  </data>
</root>