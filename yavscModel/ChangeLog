2015-12-30  Paul Schneider  <paul@pschneider.fr>

	* GoogleHelpers.cs: ça marchait avant, mais c'etait mal écrit
	et a cassé à la mise à niveau de la plateforme.

	* SimpleJsonPostMethod.cs: using Newtonsoft.Json

2015-12-30  Paul Schneider  <paul@pschneider.fr>

	* PerformerContact.cs: modèle de donnnée d'un message

	* LocalizedText.resx:
	* LocalizedText.fr.resx:
	* LocalizedText.Designer.cs:
	* LocalizedText.fr.Designer.cs: traductions

	* YavscModel.csproj: ajout du modèle de données d'un message

2015-12-30  Paul Schneider  <paul@pschneider.fr>

	* UpdatePassword.cs: modèle de la modification de mot de passe
	au
	jeton de securité (qui est encore un fake en l'état)

	* CommandRegistration.cs: un enregistrement de commande

	* NominativeCommandRegistration.cs: un enregistrement de
	commande nominative

	* Product.cs: utilise la période du calendrier

	* Commande.cs: renvoie un objet à la prise de commande,
	indiquant l'identifiant de commande, et les messages envoyés
	en cas de commande nominative.

	* GoogleHelpers.cs: icone à la notification mobile

	* LocalizedText.resx:
	* LocalizedText.fr.resx:
	* LocalizedText.Designer.cs:
	* LocalizedText.fr.Designer.cs: traductions

	* UserNameBase.cs: fixe la dé-sérialisation

	* WorkFlowManager.cs: refabrication de la prise de commande

	* YavscModel.csproj: nouveaux objets du modèle

	* Period.cs: fondre la période: celle du catalogue disparait,
	au profit de celle du calendrier.

2015-12-24  Paul Schneider  <paul@pschneider.fr>

	* NominativeEventPub.cs: implémentation du nom de préstataire
	dans la notification nominative

	* Commande.cs: code plus simple

	* GoogleHelpers.cs:
	* MessageWithPayLoad.cs: fixe l'envoi de la notification GCM

	* MessageWithPayloadResponse.cs: fixe la réception de la
	notification GCM

	* LocalizedText.resx:
	* LocalizedText.fr.resx:
	* LocalizedText.Designer.cs:
	* LocalizedText.fr.Designer.cs: traductions

	* WorkFlowManager.cs: envoyer un notification GCM + email à la
	demande de devis

	* YavscModel.csproj: ajout d'une configuration de debuggage
	pour Lua

2015-12-23  Paul Schneider  <paul@pschneider.fr>

	* WorkFlowManager.cs: une note à faire : envoyer le lieu de la
	prestation à la demande de devis

2015-12-23  Paul Schneider  <paul@pschneider.fr>

	* EventCirclesPub.cs:
	* NominativeEventPub.cs: refabrication

	* Commande.cs: implémente une description pour toute commande,
	dans la classe concrete

	* SimpleBookingQuery.cs: la description d'une commande simple
	de rdv

	* GoogleHelpers.cs: implemente l'envoi d'une notification
	nominative (à un prestataire en particulier)

	* LocalizedText.resx:
	* LocalizedText.fr.resx:
	* LocalizedText.Designer.cs:
	* LocalizedText.fr.Designer.cs: traductions

	* WorkFlowManager.cs: envoie une notification à la demande de
	devis d'un client

	* YavscModel.csproj: notifications privée.

2015-12-23  Paul Schneider  <paul@pschneider.fr>

	* INominative.cs: Interface d'un objet destiné à un
	préstataire spécifié,
	par une propriété `PerformerName`


	* NominativeSimpleBookingQuery.cs: implémente l'interface
	INominative

	* UserFileSystemManager.cs: Fixe: Ne pas créer un dossier de
	destination si on a aucun fichier à recevoir.

	* Commande.cs: * Ajoute le nom du client dans l'objet commande
	* Factorise le positionnement des paramêtres
	* La commande est une instance du type spécifié à la commande,
	dans son paramêtre `type` 

	* SimpleBookingQuery.cs: refabrication

	* LocalizedText.resx:
	* LocalizedText.fr.resx: traducations

	* UserNameBase.cs: implemente l'interface `IUserName`


	* IContentProvider.cs: doc xml

	* YavscModel.csproj: reference le nouveau code source

	* IUserName.cs: Définit l'interface d'un objet associé à un
	utilisateur.

2015-12-15  Paul Schneider  <paul@pschneider.fr>

	* CircleMember.cs: un membre de cercle est un nom
	d'utilisateur associé au cercle d'un autre utilisateur.

	* ICircle.cs: Définit l'interface d'un cercle:
	un cercle est identifié par un entier long,
	il a un possesseur.

	* CircleBase.cs: un objet cercle basique implémente
	l'interface d'un cercle.

	* PerformerProfile.cs: s'assure que le nom d'utilisateur
	utilisé n'est pas vide.

	* IIdentified.cs: doc xml

	* UserNameBase.cs: l'objet base de type "nom d'utilisateur"
	implémente l'interface générique
	d'un identifié, par une chaine de caractère.

	* YavscModel.csproj: reference les nouvelles definitions :
	* un membre de cercle
	* l'interface d'un cercle

2015-12-09  Paul Schneider  <paul@pschneider.fr>

	* CircleManager.cs: implémente les methodes utilisées à la
	construction du contrôle utilisateur.

	* CircleProvider.cs: * doc xml
	* extension de interface

	* Commande.cs: l'objet `Command` devient abstrait, pour
	exister (être instanciée), une commande doit maintenant
	hériter de cet objet abstrait.

	* LocalizedText.resx:
	* LocalizedText.fr.resx:
	* LocalizedText.Designer.cs:
	* LocalizedText.fr.Designer.cs: traductions

	* IContentProvider.cs: doc xml

2015-12-03  Paul Schneider  <paul@pschneider.fr>

	* LocalizedText.resx:
	* LocalizedText.fr.resx:
	* LocalizedText.Designer.cs:
	* LocalizedText.fr.Designer.cs: traductions

2015-12-02  Paul Schneider  <paul@pschneider.fr>

	* LocalizedText.resx:
	* LocalizedText.fr.resx:
	* LocalizedText.Designer.cs:
	* LocalizedText.fr.Designer.cs: traductions

2015-12-02  Paul Schneider  <paul@pschneider.fr>

	* PerformerProfile.cs: Ajoute la propriété "titre du blog"
	`BlogTitle` du profile préstataire

	* LocalizedText.resx:
	* LocalizedText.fr.resx:
	* LocalizedText.Designer.cs:
	* LocalizedText.fr.Designer.cs: internationalisation

2015-12-01  Paul Schneider  <paul@pschneider.fr>

	* LocalizedText.resx:
	* LocalizedText.fr.resx:
	* LocalizedText.Designer.cs:
	* LocalizedText.fr.Designer.cs: traductions

2015-11-30  Paul Schneider  <paul@pschneider.fr>

	* BlogProvider.cs: doc xml

	* BlogManager.cs: implémente un accès au compteur de billet

2015-11-30  Paul Schneider  <paul@pschneider.fr>

	* PerformerProfile.cs: doc xml

	* SimpleBookingQuery.cs:
	* AuthentificatedSkillRating.cs: refabrication

	* LocalizedText.resx:
	* LocalizedText.fr.resx:
	* LocalizedText.Designer.cs:
	* LocalizedText.fr.Designer.cs: internationalisation

	* Profile.cs: Décore la valeur de profile "GoogleRegId"

	* SkillEntity.cs: refabrication pour l'instant inutile ...

	* SkillManager.cs: présente à l'espace de travail la nouvelle
	methode de recherche d'un préstataire

	* SkillProvider.cs: définit la nouvelle methode de recherche
	d'un préstataire

	* WorkFlowManager.cs: présente à l'espace de travail une
	nouvelle methode de recherche d'un préstataire,
	renvoyant toute l'information relative à chaque prestataire
	listé.

	* YavscModel.csproj: refabrication des cotes de compétences

2015-11-28  Paul Schneider  <paul@pschneider.fr>

	* SkillManager.cs:
	* Notification.cs:
	* Notification.cs:
	* MessageWithPayLoad.cs:
	* MessageWithPayloadResponse.cs: refabrication

	* BookingQuery.cs: Le booking lourd devient une commande basée
	sur des activités concernée par l'intervention

	* ChangeLog: nettoyage

	* CatalogProvider.cs: implemente l'interface d'un fournissseur
	de contenu

	* PerformerProfile.cs: implemente le profile prestataire

	* SimpleBookingQuery.cs: Les besoin sont exprimé sous forme
	d'un tableau de valeur du parametrage de la commande

	* LocalizedText.resx:
	* LocalizedText.fr.resx:
	* LocalizedText.Designer.cs:
	* LocalizedText.fr.Designer.cs: internationalisation

	* Profile.cs: implemente un accès à l'id d'enregistrement
	Google GCM

	* SkillEntity.cs: La compétence appartient à un domaine
	d'activité, on lui associe un et un seul code APE

	* SkillProvider.cs: Fait chercher les compétences à partir
	d'un code activité

	* IContentProvider.cs: xml doc

	* WorkFlowManager.cs: implemente l'accès à la liste des
	préstataires
	de telle activité

	* YavscModel.csproj: refabrications

2015-11-28  Paul Schneider  <paul@pschneider.fr>

	* YavscModel.csproj:
	* LocalizedText.resx:
	* Entity.cs:
	* OAuth2.cs:
	* SkillEntity.cs:
	* SkillManager.cs:
	* LocalizedText.fr.resx:
	* SkillProvider.cs:
	* PeopleApi.cs:
	* MapTracks.cs:
	* ApiClient.cs:
	* Entity.cs:
	* OAuth2.cs:
	* SimpleJsonPostMethod.cs:
	* BookingQuery.cs:
	* CalendarApi.cs:
	* LocalizedText.Designer.cs:
	* Notification.cs:
	* EntityQuery.cs:
	* ApiClient.cs:
	* MapTracks.cs:
	* PeopleApi.cs:
	* WorkFlowManager.cs:
	* GoogleHelpers.cs:
	* EntityQuery.cs:
	* LocalizedText.fr.Designer.cs:
	* IContentProvider.cs:
	* CalendarApi.cs:
	* GoogleHelpers.cs:
	* PerformerProfile.cs:
	* SimpleBookingQuery.cs:
	* Notification.cs:
	* PerformerAvailability.cs:
	* CatalogProvider.cs:
	* MessageWithPayLoad.cs:
	* MessageWithPayloadResponse.cs: 

	* Profile.cs: internationalisation

2015-11-26  Paul Schneider  <paul@pschneider.fr>

	* LocalizedText.resx:
	* LocalizedText.fr.resx:
	* LocalizedText.Designer.cs:
	* LocalizedText.fr.Designer.cs: internationalisation

	* YavscModel.csproj: nouvelles configurations de déploiement

2015-11-26  Paul Schneider  <paul@pschneider.fr>

	* EventPub.cs:
	* BaseEvent.cs: internationalise l'évennement (la base d'une
	notification)

	* YaEvent.cs: les champs fournisseur d'une notification ne
	sont pas requis. On peut en avoir de la part du site lui même,
	qui ne soient pas à l'origine d'un evennement tiers du
	workflow. Dans tous les autres cas, ils devraient être
	renseignés ... à suivre.

	* Circle.cs:
	* CircleBase.cs: ajoute une methode de construition des
	destinataires à partir d'un tableau d'identifiants de cercles.

	* Activity.cs: implémente la photo activité dans le modèle

	* SimpleBookingQuery.cs: refabriqué

	* MessageWithPayLoad.cs: accuse aussi le champ `to` en cas
	d'absence de destinataire.

	* LocalizedText.resx:
	* LocalizedText.fr.resx:
	* LocalizedText.Designer.cs:
	* LocalizedText.fr.Designer.cs: internationalisation

2015-11-25  Paul Schneider  <paul@pschneider.fr>

	* BlogManager.cs: refactorisation 

	* Activity.cs: implémente un type de commande à associer à une
	activité.

	* LocalizedText.fr.resx:
	* LocalizedText.Designer.cs:
	* LocalizedText.fr.Designer.cs: La traduction de "ne pas
	publier mon activité"

	* LocalizedText.resx: La traduction de "ne pas publier mon
	activité", et de "Votre activité"


	* ManagerHelper.cs: refabrique l'instanciation des
	fournisseurs du workflow,
	pour avoir une liste de toutes les activité prises en charges
	par tous les fournisseurs de contenu.


	* Profile.cs: Implement le code activité de l'objet `Profile`

	* ProfileEdition.cs: xmldoc

	* SkillManager.cs: Formattage du code source

	* IContentProvider.cs: reformattage du code+
	propriété "Name" du fournisseur +
	definition des methodes relatives à la gestion des activités

	* WorkFlowManager.cs: Methodes de recupperation des activités
	fournies auprés des fournisseurs de contenu

	* YavscModel.csproj: renommage

2015-11-23  Paul Schneider  <paul@pschneider.fr>

	* Estimate.cs:
	* IContentProvider.cs: refactorisation fournisseurs

	* IDataProvider.cs: Permet aux fournisseurs d'identifier les
	contenus avec un type de donnée arbitraire,
	du moment que ce type identifie les contenus.

2015-11-23  Paul Schneider  <paul@pschneider.fr>

	* Manager.cs: implémente la fonction de construction des
	fournisseurs définis par une interface (sans type, ni concret,
	ni abstrait, comme ceux du workflow).

	* WorkFlowManager.cs: refactorisation: utiliser le code commun
	pour instancier le fournisseur de données.

2015-11-23  Paul Schneider  <paul@pschneider.fr>

	* ITitle.cs:
	* RssFeeds.cs:
	* Blog.cs:
	* BasePost.cs:
	* YaEvent.cs:
	* Estimate.cs:
	* BaseEvent.cs:
	* Activity.cs:
	* UTBlogEntryCollection.cs:
	* UUTBlogEntryCollection.cs: refactorisation: Les titres
	obtiennent une interface logicielle dédiée.

	* PerformerProfile.cs: refactorisation: Les identifiant
	deviennent génériques

	* IRating.cs:
	* IComment.cs:
	* IIdentified.cs: refactorisation: Les identifiant et
	commentaires deviennent génériques

	* ITagBackup.cs: refactorisation: un meilleur nom pour cette
	interface qui n'a pas encore d'implementeur.

	* UserNameBase.cs: xml doc

	* UserSkill.cs:
	* UserSkillComment.cs: Les commentaire deviennent génériques

	* OtherWebException.cs: classe obsolete

	* ViewRenderer.cs: classe obsolète

	* YavscModel.csproj: nettoyages de classes obsoletes, ajout
	des nouvelles interfaces et de la classe de base implementant
	l' "activité".

2015-11-23  Paul Schneider  <paul@pschneider.fr>

	* SimpleBookingQuery.cs: Implémente une simple commande de
	rendez-vous,
	en tant que commande du workflow.

	* PerformerProfile.cs: S'assure d'avoir une valeur pour le nom
	d'utilisateur à la création.

	* LocalizedText.resx:
	* LocalizedText.Designer.cs: "date préférée" en anglais

	* LocalizedText.fr.resx:
	* LocalizedText.fr.Designer.cs: "date préférée" en français

	* Profile.cs: à la creation d'un profile, on doit avoir un nom
	d'utilisateur,
	même dans le cas où le profile est anonyme (dans ce cas,
	on l'appelle identifiant anonyme).
	Sinon, on lève une exception.

	* SkillEntity.cs:
	* SkillManager.cs:
	* SkillProvider.cs: refactorisation (-Skill+SkillEntity)

	* YavscModel.csproj: * refactorisation: le nom `Skill` est
	celui de l'espace,
	celui de la classe devient `SkillEntity`.
	* Creation de la requête dite simple d'un rendez-vous (pour
	prestation)
	à une date donnée (sans heure), concernant simplement une
	activité.

2015-11-22  Paul Schneider  <paul@pschneider.fr>

	* YavscModel.csproj:
	* Commande.cs:
	* WorkFlowManager.cs:
	* WebFileSystemManager.cs:
	* UserFileSystemManager.cs: refactorisation du code, en vue de
	la mise en place
	de la commande sans enregistrement du client sur le site.

2015-11-21  Paul Schneider  <paul@pschneider.fr>

	* UserNameBase.cs: Permet l'usage des espaces dans les noms
	d'utilisateurs,
	à la création legacy, ou autres usage du nom d'utilisateur. 

2015-11-19  Paul Schneider  <paul@pschneider.fr>

	* YavscModel.csproj: Lua config

2015-11-17  Paul Schneider  <paul@pschneider.fr>

	* PerformerProfile.cs: implements a performer profile

	* SkillManager.cs:
	* SkillProvider.cs: Makes the method rendering skills return a
	PerformerProfile object

	* YavscModel.csproj: replaces the UserSkillProfile with the
	PerformerProfile class

	* UserSkillProfile.cs: obsolete

2015-11-17  Paul Schneider  <paul@pschneider.fr>

	* IRating.cs:
	* IComment.cs:
	* IIdentified.cs:
	* IAuthorized.cs:
	* BasePost.cs:
	* SkillProvider.cs: refactorization

	* Skill.cs:
	* YavscModel.csproj:
	* UserSkill.cs:
	* SkillManager.cs:
	* UserSkillRating.cs:
	* UserSkillProfile.cs:
	* UserSkillReference.cs:
	* UserSkillDeclaration.cs: implements the skill data model

	* UserSkillComment.cs: defines an user's skill comment

	* GDate.cs:
	* YaEvent.cs:
	* BlogProvider.cs:
	* CircleBase.cs:
	* Profile.cs:
	* CalendarListEntry.cs:
	* CalendarEventList.cs:
	* UserRole.cs:
	* ICalendarManager.cs:
	* ProfileEdition.cs:
	* LostPasswordModel.cs:
	* RegisterClientModel.cs: xmldoc

	* LocalizedText.fr.resx: skills

	* Manager.cs: throws an exception when implementation for the
	provider was not found

	* IDataProvider.cs: xml doc

2015-11-14  Paul Schneider  <paul@pschneider.fr>

	* IRated.cs:
	* BlogHelper.cs:
	* ICalendarManager.cs: 

	* Manager.cs:
	* BookingQuery.cs: refactoring

	* Manager.cs:
	* YavscModel.csproj:
	* SkillRating.cs:
	* SkillManager.cs:
	* SkillRating.cs:
	* SkillProvider.cs:
	* SkillManager.cs:
	* SkillProvider.cs:
	* SkillDeclaration.cs:
	* SkillDeclaration.cs: VIP skills

	* BasePost.cs: One may rate a bill

	* BlogProvider.cs: The blogs provider takes BlogEntry objects
	at Update time

	* LocalizedText.resx:
	* LocalizedText.fr.resx:
	* LocalizedText.Designer.cs:
	* LocalizedText.fr.Designer.cs: WIP skills

	* Profile.cs: prettifies the code, as long as the profile
	providers does'nt return any more DBNull values

	* BlogManager.cs: Uses the static ManagerHelper class to get
	the configuration

2015-11-11  Paul Schneider  <paul@pschneider.fr>

	* BasePost.cs: all BasePost contains a rate

	* BasePostInfo.cs: due to base implementation

	* BlogEntry.cs: code formatting

	* BlogManager.cs: Fixes the taginfo object delivering

	* BlogProvider.cs: refactoring

	* LocalizedText.resx:
	* LocalizedText.fr.resx:
	* LocalizedText.Designer.cs:
	* LocalizedText.fr.Designer.cs: localizes UserInRole 

	* LoginModel.cs: enables spaces in the legacy login names 

	* Profile.cs: gives users the theme choice

2015-11-08  Paul Schneider  <paul@pschneider.fr>

	* LoginModel.cs:
	* UserNameBase.cs: enables legacy login with spaces in the
	user name

	* ProfileEdition.cs: xml doc

2015-11-06  Paul Schneider  <paul@pschneider.fr>

	* ChangeLog:
	* TagInfo.cs:
	* BasePost.cs:
	* LocalizedText.resx:
	* BlogEntry.cs:
	* BlogManager.cs:
	* BlogProvider.cs:
	* BookQuery.cs:
	* BasePostInfo.cs:
	* LocalizedText.fr.resx:
	* IFreeDateSet.cs:
	* LocalizedText.Designer.cs:
	* Notification.cs:
	* LocalizedText.fr.Designer.cs:
	* ICalendarManager.cs:
	* BlogEntryCollection.cs:
	* ProfileEdition.cs:
	* WebFileSystemManager.cs: 

